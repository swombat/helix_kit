---
http_interactions:
- request:
    method: post
    uri: https://openrouter.ai/api/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"google/gemini-2.5-pro-preview-03-25","messages":[{"role":"system","content":"You
        are a JSON generator. ONLY respond with valid JSON. No markdown, no backticks,
        no explanations. Generate 3 separate complete JSON objects that I can parse
        individually."},{"role":"user","content":"Generate 3 JSON objects with information
        about programming languages. Each object should include name, type, and popular_use_case."}],"temperature":0.7,"stream":true}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENROUTER_API_KEY>
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Tue, 02 Sep 2025 07:05:07 GMT
      content-type:
      - text/event-stream
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cf-ray:
      - 978b282d2ed8eca2-MAD
      access-control-allow-origin:
      - "*"
      cache-control:
      - no-cache
      vary:
      - Accept-Encoding
      permissions-policy:
      - payment=(self "https://checkout.stripe.com" "https://connect-js.stripe.com"
        "https://js.stripe.com" "https://*.js.stripe.com" "https://hooks.stripe.com")
      referrer-policy:
      - no-referrer, strict-origin-when-cross-origin
      x-content-type-options:
      - nosniff
      server:
      - cloudflare
    body:
      encoding: UTF-8
      string: |+
        : OPENROUTER PROCESSING

        : OPENROUTER PROCESSING

        : OPENROUTER PROCESSING

        : OPENROUTER PROCESSING

        : OPENROUTER PROCESSING

        data: {"id":"gen-1756796704-wsbWh75QFrfKljbmmeow","provider":"Google","model":"google/gemini-2.5-pro","object":"chat.completion.chunk","created":1756796705,"choices":[{"index":0,"delta":{"role":"assistant","content":"","reasoning":"**Constructing JSON Objects**\n\nI've started to flesh out the Python object. I'm on the right track, outlining the need to represent programming languages as JSON objects with specific keys like 'name', 'type', and 'popular_use_case'. I'm confident I can handle creating the full structure.\n\n\n","reasoning_details":[{"type":"reasoning.text","text":"**Constructing JSON Objects**\n\nI've started to flesh out the Python object. I'm on the right track, outlining the need to represent programming languages as JSON objects with specific keys like 'name', 'type', and 'popular_use_case'. I'm confident I can handle creating the full structure.\n\n\n","format":"unknown","index":0}]},"finish_reason":null,"native_finish_reason":null,"logprobs":null}]}

        : OPENROUTER PROCESSING

        : OPENROUTER PROCESSING

        data: {"id":"gen-1756796704-wsbWh75QFrfKljbmmeow","provider":"Google","model":"google/gemini-2.5-pro","object":"chat.completion.chunk","created":1756796705,"choices":[{"index":0,"delta":{"role":"assistant","content":"","reasoning":"**Defining Language Structures**\n\nI'm moving forward with the JSON object generation. I've decided to use the 'name', 'type', and 'popular_use_case' keys for each language. Specifically, Python, JavaScript, and C++ will be the languages. Their respective types and popular use cases are now clearly defined and I am ready to build the JSON objects.\n\n\n","reasoning_details":[{"type":"reasoning.text","text":"**Defining Language Structures**\n\nI'm moving forward with the JSON object generation. I've decided to use the 'name', 'type', and 'popular_use_case' keys for each language. Specifically, Python, JavaScript, and C++ will be the languages. Their respective types and popular use cases are now clearly defined and I am ready to build the JSON objects.\n\n\n","format":"unknown","index":0}]},"finish_reason":null,"native_finish_reason":null,"logprobs":null}]}

        data: {"id":"gen-1756796704-wsbWh75QFrfKljbmmeow","provider":"Google","model":"google/gemini-2.5-pro","object":"chat.completion.chunk","created":1756796705,"choices":[{"index":0,"delta":{"role":"assistant","content":"```json\n{\n  \"name\": \"Python\",\n  \"type\": \"Interpreted\",\n  \"popular_use_case\": \"Data Science and Machine Learning\"\n}\n```\n```json\n{\n  \"name\": \"JavaScript\",\n  \"type\": \"Just-in-Time Compiled","reasoning":null,"reasoning_details":[]},"finish_reason":null,"native_finish_reason":null,"logprobs":null}]}

        data: {"id":"gen-1756796704-wsbWh75QFrfKljbmmeow","provider":"Google","model":"google/gemini-2.5-pro","object":"chat.completion.chunk","created":1756796705,"choices":[{"index":0,"delta":{"role":"assistant","content":"\",\n  \"popular_use_case\": \"Web Development (Frontend and Backend)\"\n}\n```\n```json\n{\n  \"name\": \"C++\",\n  \"type\": \"Compiled\",\n  \"popular_use_case\": \"Game Development and High-Performance Systems\"\n}\n","reasoning":null,"reasoning_details":[]},"finish_reason":null,"native_finish_reason":null,"logprobs":null}]}

        data: {"id":"gen-1756796704-wsbWh75QFrfKljbmmeow","provider":"Google","model":"google/gemini-2.5-pro","object":"chat.completion.chunk","created":1756796705,"choices":[{"index":0,"delta":{"role":"assistant","content":"```","reasoning":null,"reasoning_details":[]},"finish_reason":"stop","native_finish_reason":"STOP","logprobs":null}]}

        data: {"id":"gen-1756796704-wsbWh75QFrfKljbmmeow","provider":"Google","model":"google/gemini-2.5-pro","object":"chat.completion.chunk","created":1756796705,"choices":[{"index":0,"delta":{"role":"assistant","content":""},"finish_reason":null,"native_finish_reason":null,"logprobs":null}],"usage":{"prompt_tokens":61,"completion_tokens":316,"total_tokens":377,"prompt_tokens_details":{"cached_tokens":0},"completion_tokens_details":{"reasoning_tokens":184,"image_tokens":0}}}

        data: [DONE]

  recorded_at: Tue, 02 Sep 2025 07:05:08 GMT
recorded_with: VCR 6.3.1
...
